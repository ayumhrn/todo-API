var cov_19rqu1ncuu=function(){var path="/home/ayumhrn/Glint-task/task_todo/models/users.js";var hash="a60cfabe91d5f1db74e45d3792a8602aec01a153";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/ayumhrn/Glint-task/task_todo/models/users.js",statementMap:{"0":{start:{line:1,column:15},end:{line:1,column:34}},"1":{start:{line:2,column:13},end:{line:2,column:28}},"2":{start:{line:3,column:13},end:{line:3,column:30}},"3":{start:{line:4,column:17},end:{line:4,column:19}},"4":{start:{line:5,column:22},end:{line:5,column:58}},"5":{start:{line:7,column:17},end:{line:40,column:2}},"6":{start:{line:31,column:12},end:{line:31,column:102}},"7":{start:{line:42,column:0},end:{line:45,column:2}},"8":{start:{line:43,column:4},end:{line:43,column:63}},"9":{start:{line:44,column:4},end:{line:44,column:11}},"10":{start:{line:47,column:0},end:{line:47,column:86}},"11":{start:{line:48,column:11},end:{line:48,column:45}},"12":{start:{line:50,column:0},end:{line:50,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:30,column:18},end:{line:30,column:19}},loc:{start:{line:30,column:34},end:{line:32,column:11}},line:30},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:23},end:{line:42,column:24}},loc:{start:{line:42,column:38},end:{line:45,column:1}},line:42}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a60cfabe91d5f1db74e45d3792a8602aec01a153"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();var mongoose=(cov_19rqu1ncuu.s[0]++,require('mongoose'));var Schema=(cov_19rqu1ncuu.s[1]++,mongoose.Schema);var bcrypt=(cov_19rqu1ncuu.s[2]++,require('bcrypt'));var saltRounds=(cov_19rqu1ncuu.s[3]++,10);var uniqueValidator=(cov_19rqu1ncuu.s[4]++,require('mongoose-unique-validator'));var userSchema=(cov_19rqu1ncuu.s[5]++,new Schema({_id:mongoose.Schema.Types.ObjectId,username:{type:String,unique:true,required:[true,"You must have username!"]},name:{firstName:{type:String,required:[true,'Enter your name!']},lastName:String},gender:{type:String,enum:['M','F']},email:{type:String,unique:true,lowercase:true,required:true,validate:function(email){cov_19rqu1ncuu.f[0]++;cov_19rqu1ncuu.s[6]++;return /^[a-zA-Z0-9.!#$%&â€™*+\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(email);}},password:{type:String,min:64,max:64},todo:[{type:mongoose.Schema.Types.ObjectId,ref:'todo'}]}));cov_19rqu1ncuu.s[7]++;userSchema.pre('save',function(next){cov_19rqu1ncuu.f[1]++;cov_19rqu1ncuu.s[8]++;this.password=bcrypt.hashSync(this.password,saltRounds);cov_19rqu1ncuu.s[9]++;next();});cov_19rqu1ncuu.s[10]++;userSchema.plugin(uniqueValidator,{message:'Error, expected {PATH} to be unique.'});var user=(cov_19rqu1ncuu.s[11]++,mongoose.model('user',userSchema));cov_19rqu1ncuu.s[12]++;module.exports=user;